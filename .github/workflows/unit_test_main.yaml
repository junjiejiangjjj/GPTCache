name: Unit test

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'examples/**'
      - 'gptcache/**'
      - 'tests/**'
      - '!**.md'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
      - dev
    paths:
      - 'examples/**'
      - 'gptcache/**'
      - 'tests/**'
      - '!**.md'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  unit-test-main:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@main

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          cache: pip

      - name: Install dependency
        shell: bash
        run: |
          pip install -r requirements.txt

      - name: Build and install
        shell: bash
        run: |
          python setup.py install

      - name: Install test dependency
        shell: bash
        working-directory: tests
        run: |
          pip install -r requirements.txt

      - name: Unit Tests
        timeout-minutes: 10
        shell: bash
        working-directory: tests
        run: |
          python3 -m pytest ./

      - name: Generate coverage report
        run: |
          rm -rf ./coverage.xml
          pip install coverage codecov pytest pytest-cov
          coverage erase
          coverage run --source=gptcache  -m pytest ./tests
          coverage xml

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-result
          path: |
            coverage.xml

  codecov:
    name: Code coverage
    needs: unit-test-main
    runs-on: ubuntu-latest
    steps:
      - name: Download code coverage results
        uses: actions/download-artifact@v3.0.1
        with:
          name: code-coverage-result

      - name: Display structure of code coverage results
        run: |
          ls -lah

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: true
